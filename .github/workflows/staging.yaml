name: Staging

on: 
  workflow_dispatch

permissions:
  id-token: write
  contents: read

concurrency: staging_environment

env: 
  ENV: staging

jobs:
  tf-setup:
    name: 'Provision staging environment'
    runs-on: ubuntu-latest
    outputs:
      acr-login: ${{ steps.terraform.outputs.acr_login }}
    environment: staging
    env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_postgres_user: ${{ secrets.TF_VAR_postgres_user }}
        TF_VAR_postgres_password: ${{ secrets.TF_VAR_postgres_password }}
        SECRET: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'Terraform Setup'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: 'Initialize Terraform'
        working-directory: ./staging
        run: terraform init
      - name: 'Get state'
        working-directory: ./staging
        run: terraform plan -refresh-only
      - name: 'Make plan'
        working-directory: ./staging
        run: terraform plan -out test.tfplan
      - name: 'Apply plan'
        working-directory: ./staging
        run: terraform apply test.tfplan
      - name: Save outputs
        id: terraform
        working-directory: ./staging
        run: |
          ACR_LOGIN=$(terraform output -raw acr_login)
          echo "acr_login=$ACR_LOGIN" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: 'Deploy Frontend'
    needs: tf-setup
    runs-on: ubuntu-latest
    environment: staging
    env: 
        PAT: ${{ secrets.GHP }}
        ACR_LOGIN: ${{ needs.tf-setup.outputs.acr-login }}

    steps:
        - name: 'Trigger deploy workflow in frontend repo'
          run: |
           curl -X POST https://api.github.com/repos/Kafkaese/taro-map/dispatches \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -u $PAT \
            --data '{"event_type": "trigger-deploy", "client_payload": { "acr-login": "$ACR_LOGIN" }}'

  tf-destroy:
    name: 'Destroy staging environment'
    if: ${{ always() }}
    needs: [tf-setup, deploy-frontend]
    runs-on: ubuntu-latest
    environment: staging
    env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: 'Terraform Setup'
      uses: hashicorp/setup-terraform@v1
    - name: 'Initialize Terraform'
      working-directory: ./staging
      run: terraform init
    - name: 'Get state'
      working-directory: ./staging
      run: terraform plan -refresh-only
    - name: 'Make plan'
      working-directory: ./staging
      run: terraform plan -destroy -out test.tfplan
    - name: 'Apply plan'
      working-directory: ./staging
      run: terraform apply test.tfplan
